# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

ip=$(hostname -I)

if [ "$color_prompt" = yes ]; then
    PS1=""
else
    PS1="${debian_chroot:+($debian_chroot)}\u@\h: \w\a$ "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

######## MY CONFIGS ############
# C0MPOSER
export PATH="$PATH:$HOME/.config/composer/vendor/bin"
#

# GIT
source /usr/lib/git-core/git-sh-prompt
# GIT_PS1_SHOWDIRTYSTATE=1
# GIT_PS1_SHOWCOLORHINTS=1
# GIT_PS1_SHOWUNTRACKEDFILES=1

# Python virtualenv
# VIRTUAL_ENV_DISABLE_PROMPT=1

# Set PS1 configs with git and venv
function set_ps1() {
  ARROWINI='╭─'
  ARROWMID='╰─╮'
  ARROWEND='╰─⚫'
  ARROW='➜'
  FOLDER='📂'
  MUG='☕'
  # MUSH='🍄'
  SNAKE='🐍'
  CLOCK='🕒'
  MARK_V='✔'
  TIME=$(date '+%H:%M:%S')

  # DIR_SIZE=$(du -sh . | cut -f1)
  # COUNT_FILES=$(ls -Ap | grep -v /$ | wc -l)
  # COUNT_DIRS=$(ls -1 | wc -l)

  COUNT_DIRS=$(ls -l | grep ^d | wc -l)
  D='directories'
  if [ ${COUNT_DIRS} -eq 1 ]; then
    D='directory'
  fi

  COUNT_FILES=$(ls -Ap | grep -v /$ | wc -l)
  F='files'
  if [ ${COUNT_FILES} -eq 1 ]; then
    F='file'
  fi

  : '
  COUNT_DIRS_HID=1
  DH='hidden'
  COUNT_FILES_HID=$(ls -ld .* | grep -v ^d | wc -l)
  '

  REDLIGHT='\[\033[0;91m\]'
  RED='\[\033[0;31m\]'
  GREEN='\[\033[0;32m\]'
  GRAY_BOLD='\[\033[1;90m\]'
  ENDCOLOR='\[\033[0m\]'
  BOLD='\033[1m\]'
  ITALIC='\033[3m\]'
  BOLD_ITALIC='\033[1;3m\]'
  ENDATTR='\[\033[0m\]'

  USER_DIR="${debian_chroot:+($debian_chroot)}\h ${ARROW}  \u@$ip"
  COUNTERS="${FOLDER} ${COUNT_DIRS} ${D}, ${COUNT_FILES} ${F} ${ARROW}"
  GIT=$(__git_ps1 "git ${ARROW}  %s")

  function get_git_status() {
    local git_status="$(git status 2> /dev/null)"

    if [[ ! ${git_status} == "" ]]; then
    	statusmsg=${git_status}
    	len=${#git_status}
    	if [[ len -ge 40 ]]; then
    		statusmsg=${git_status:0:50}
    	fi
    	echo "1 ${statusmsg}..."
    	# return 1
    # elif [[ $git_status =~ "On branch " ]]; then
    #	return 1
	fi
  }
  #get_git_status $?
  #gitstat=$?
  read gitstat gitmsg < <(get_git_status)
  GIT="${RED}${ITALIC}${GIT}: ${gitmsg}${ENDCOLOR}"

  if test -z "$VIRTUAL_ENV" ; then
  	  INIT="${REDLIGHT}${ARROWINI}${CLOCK}${TIME}${ENDCOLOR}"
      ARROWMID="${REDLIGHT}${ARROWMID}${ENDCOLOR}"
      # MID_LINE="${ARROWMID}${GRAY_BOLD}${COUNTERS}  \w${ENDCOLOR}"
      # ARROWEND="${REDLIGHT}     ${ARROWEND}${ENDCOLOR}"      
      
      PS1="${INIT} ${GRAY_BOLD}${MUG} ${USER_DIR}${ENDCOLOR}\n"

      if [[ ${gitstat} -eq 1 ]]; then
      	PS1="${PS1}${ARROWMID}${GRAY_BOLD}${COUNTERS}  \w${ENDCOLOR}\n${REDLIGHT}  ${ARROWEND}${ENDCOLOR}${GIT}\n"
      else
      	PS1="${PS1}${REDLIGHT}${ARROWEND}${ENDCOLOR}${GRAY_BOLD}${COUNTERS}  \w${ENDCOLOR}\n"
      fi

      PS1="${PS1}${REDLIGHT}  $ ${ENDCOLOR}"
  else
      PYVENV="${SNAKE}${ITALIC} $(basename $VIRTUAL_ENV)${ENDATTR}"
      INIT="${GREEN}${ARROWINI}${CLOCK}${TIME} ${PYVENV}${ENDCOLOR}"
      ARROWMID="${GREEN}${ARROWMID}${ENDCOLOR}"
      # MID_LINE="${ARROWMID} ${GRAY_BOLD}${COUNTERS}  \w${ENDCOLOR}"
      # ARROWEND="${GREEN}     ${ARROWEND}${ENDCOLOR}"

      PS1="${INIT} ${GRAY_BOLD}${ARROW}  ${USER_DIR}${ENDCOLOR}\n"

      if [[ ${gitstat} -eq 1 ]]; then
        PS1="${PS1}${ARROWMID} ${GRAY_BOLD}${COUNTERS}  \w${ENDCOLOR}\n${GREEN}  ${ARROWEND}${ENDCOLOR}${GIT}\n"
      else
      	PS1="${PS1}${GREEN}${ARROWEND}${ENDCOLOR}${GRAY_BOLD}${COUNTERS}  \w${ENDCOLOR}\n"
      fi

      PS1="${PS1}${GREEN}  $ ${ENDCOLOR}"
  fi
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_ps1
COLUMNS=100

alias py3='python3'
